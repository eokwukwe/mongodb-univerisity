use('aggregations')

// db.movies.aggregate([
//   {
//     /**
//      * _id: The id of the group.
//      * fieldN: The first field name.
//      */
//     $group: {
//       _id: "$year",
//       num_films_in_year: { $sum: 1 }
//     }
//   },
//   {
//     $sort: { num_films_in_year: -1 }
//   }
// ])

// db.air_alliances.aggregate([
//   {
//     /**
//      * from: The target collection.
//      * localField: The local join field.
//      * foreignField: The target join field.
//      * as: The name for the results.
//      * pipeline: The pipeline to run on the joined collection.
//      * let: Optional variables to use in the pipeline field stages.
//      */
//     $lookup: {
//       from: 'air_airlines',
//       localField: 'airlines',
//       foreignField: 'name',
//       as: 'airlines'
//     }
//   }
// ])

// db.movies.aggregate([
//   {
//     /**
//      * query: The query in MQL.
//      */
//     $match: {
//       "imdb.rating": { $gt: 0 },
//       year: { $gte: 2010, $lte: 2015 },
//       runtime: { $gte: 90 }
//     }
//   },
//   {
//     $unwind: "$genres"
//   },
//   {
//     $group: {
//       _id: {
//         year: "$year",
//         genre: "$genres"
//       },
//       average_rating: { $avg: "$imdb.rating" }
//     }
//   },
//   {
//     $sort: { "_id.year": -1, average_rating: -1 }
//   },
//   {
//     $group: {
//       _id: "$_id.year",
//       genre: { $first: "$_id.genre"},
//       average_rating: { $first: "$average_rating"}
//     }
//   },
//   {
//     $sort: { _id: -1 }
//   }
// ])

/** Lab - $group and Accumulators */
// db.movies.aggregate([
//   {
//     /**
//      * filtering documents for the appropriate text stating they won an Oscar
//      */
//     $match: {
//       awards: /Won \d{1,2} Oscars?/
//     }
//   },
//   {
//     /**
//      * specifications: The fields to
//      *   include or exclude.
//      */
//     $group: {
//       _id: null,
//       highest_rating: { $max: "$imdb.rating" },
//       lowest_rating: { $min: "$imdb.rating" },
//       average_rating: { $avg: "$imdb.rating" },
//       deviation: { $stdDevSamp: "$imdb.rating" },
//     }
//   }
// ])

/** Lab - $unwind */
// db.movies.aggregate([
//   {
//     /**
//      * movies that include "English" as a language
//      */
//     $match: {
//       languages: "English"
//     }
//   },
//   {
//     /**
//      * keeping only the data necessary for the aggregation 
//      * stages that follow
//      */
//     $project: {
//       _id: 0,
//       cast: 1,
//       "imdb.rating": 1
//     }
//   },
//   {
//     /**
//      * extract every entry in the cast array and creating a
//      * document for each one
//      */
//     $unwind: "$cast"
//   },
//   { /**
//      * groups cast members together by their name, total the
//      * number of documents, and get the average imdb.rating
//     */
//     $group: {
//       _id: "$cast",
//       numFilms: { $sum: 1 },
//       average: { $avg: "$imdb.rating" }
//     }
//   },
//   {
//     /**
//      * truncate the imdb.rating to one decimal. This is done by first multiplying 
//      * by 10, truncating the number, then dividing by 10.
//      */
//     $project: {
//       numFilms: 1,
//       average: {
//         $divide: [
//           { $trunc: { $multiply: ["$average", 10 ] }},
//           10
//         ]
//       }
//     }
//   },
//   {
//     $sort: { numFilms: -1 }
//   },
//   {
//     $limit: 1
//   }
// ])

/** Lab - Using $lookup */
db.air_routes.aggregate([
  {
    /**
     * filter documents where 'airplane' contains "747" or "380"
     */
    $match: {
      airplane: /747|380/
    }
  },
  {
    /**
     * match documents from air_alliances on the value of their airlines 
     * field against the current 'air_routes' airline.name field
     */
    $lookup: {
      from: 'air_alliances',
      localField: 'airline.name',
      foreignField: 'airlines',
      as: 'alliance'
    }
  },
  {
    /**
     * creating a document with each entry in alliance
     */
    $unwind: '$alliance'
  },
  {
    /**
     * group on the name of the alliance and count how many times it appeared
     */
    $group: {
      _id: '$alliance.name',
      count: { $sum: 1 }
    }
  },
  {
    /**
     * Sort in descending order.
     */
    $sort: { count: -1 }
  }
])
